package group9.GridCollageGenerator;

import group9.RandomCollageGenerator.ICollageGenerator;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class GridCollageGenerator implements ICollageGenerator {
    private final ArrayList<BufferedImage> images;
    private final Collage collage;
    private int[][] imageLocations;

    public GridCollageGenerator(ArrayList<BufferedImage> images) {
        this.images = images;
        collage = generateCollage();
        collage.draw();
    }

    public Collage getCollage() {
        return collage;
    }

    public int getLargestWidth(ArrayList<BufferedImage> imageCollection) {
        int largestWidth = 0;
        for (BufferedImage image : imageCollection) {
            int width = image.getWidth();
            if (width > largestWidth) largestWidth = width;
        }
        return largestWidth;
    }

    public int getLargestHeight(ArrayList<BufferedImage> imageCollection) {
        int largestHeight = 0;
        for (BufferedImage image : imageCollection) {
            int height = image.getHeight();
            if (height > largestHeight) largestHeight = height;
        }
        return largestHeight;
    }

    public int getSmallestWidth(ArrayList<BufferedImage> imageCollection) {
        int smallestWidth = Integer.MAX_VALUE;
        for (BufferedImage image : imageCollection) {
            int width = image.getWidth();
            if (width < smallestWidth) smallestWidth = width;
        }
        return smallestWidth;
    }

    public int getSmallestHeight(ArrayList<BufferedImage> imageCollection) {
        int smallestHeight = Integer.MAX_VALUE;
        for (BufferedImage image : imageCollection) {
            int height = image.getHeight();
            if (height < smallestHeight) smallestHeight = height;
        }
        return smallestHeight;
    }

    private Collage generateCollage() {
        int largestWidth = getLargestWidth(this.images);
        int largestHeight = getLargestHeight(this.images);
        //int smallestWidth = getSmallestWidth();
        //int smallestHeight = getSmallestHeight();

        int numPics = images.size();
        int[] gridShape = getGridShape(numPics);

        int collageWidth = largestWidth * gridShape[0];
        int collageHeight = largestHeight * gridShape[1];
        double scaleWidth = 1;
        double scaleHeight = 1;

        if (collageWidth > 2048) {
            scaleWidth = 2048 / (double) collageWidth;
            collageWidth = 2048;
        }

        if (collageHeight > 2048) {
            scaleHeight = 2048 / (double) collageHeight;
            collageHeight = 2048;
        }

        Collage collage = new Collage(collageWidth, collageHeight);

        //imageLocations = new int[gridShape[0]][gridShape[1]];

        int index = 0;
        for (int i = 0; i < gridShape[0]; i++) {
            for (int j = 0; j < gridShape[1]; j++) {
                int frameWidth = (int) (largestWidth * scaleWidth);
                int frameHeight = (int) (largestHeight * scaleHeight);
                BufferedImage image = images.get(index);
                int imageWidth = (int) (image.getWidth() * scaleWidth);
                int imageHeight = (int) (image.getHeight() * scaleWidth);
                collage.addImage(image, frameWidth * i, frameHeight * j, imageWidth, imageHeight);
                index++;
            }
        }

        return collage;
    }

    private int calcNumHorizontal(BufferedImage image, int areaWidth) {
        double imageWidth = image.getWidth();

        return (int) Math.ceil(imageWidth / areaWidth);
    }

    private int calcNumVertical(BufferedImage image, int areaHeight) {
        double imageHeight = image.getHeight();

        return (int) Math.ceil(imageHeight / areaHeight);
    }

    private static int[] getGridShape(int n) {
        int factor = (int) Math.sqrt(n);
        while (n % factor != 0) factor--;

        return new int[]{factor, n / factor};
    }

    //code to test this Collage Generator
    public static void main(String[] args) throws IOException {
        ArrayList<BufferedImage> images = new ArrayList<>();
        images.add(ImageIO.read(new File("trunk/resources/testImages/dog.jpg")));
        images.add(ImageIO.read(new File("trunk/resources/testImages/dog.jpg")));
        images.add(ImageIO.read(new File("trunk/resources/testImages/dog.jpg")));
        images.add(ImageIO.read(new File("trunk/resources/testImages/dog.jpg")));
        images.add(ImageIO.read(new File("trunk/resources/testImages/dog.jpg")));
        images.add(ImageIO.read(new File("trunk/resources/testImages/dog.jpg")));
        images.add(ImageIO.read(new File("trunk/resources/testImages/dog.jpg")));
        images.add(ImageIO.read(new File("trunk/resources/testImages/dog.jpg")));
        images.add(ImageIO.read(new File("trunk/resources/testImages/dog.jpg")));
        images.add(ImageIO.read(new File("trunk/resources/testImages/dog.jpg")));
        images.add(ImageIO.read(new File("trunk/resources/testImages/dog.jpg")));
        images.add(ImageIO.read(new File("trunk/resources/testImages/dog.jpg")));

        new GridCollageGenerator(images);
    }
}
