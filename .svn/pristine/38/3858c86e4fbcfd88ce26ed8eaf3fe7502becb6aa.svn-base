package group9.UnitTests;

import group9.GridCollageGenerator.GridCollageGenerator;
import group9.Testing.ConversionToBlackAndWhite;
import group9.utils.Utils;
import org.junit.Assert;
import org.junit.jupiter.api.Test;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayList;

import static javax.imageio.ImageIO.read;
import static org.junit.jupiter.api.Assertions.*;

public class ImageTesting {

    private static void execute() throws IOException {
        File kitten = new File("trunk\\resources\\testImages\\kien.jpg"); //expect IOException
        BufferedImage kittenImage = (read(kitten));
    }

    @Test
    public void testFileNotNull() {
        File kitten = new File("trunk\\resources\\testImages\\kitten.jpg");
        Assert.assertNotNull(kitten);
    }

    @Test
    public void testBufferedImageNotNull() {
        BufferedImage puppy = null;
        try {
            puppy = read(getClass().getResource("puppyTest.jpg"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        Assert.assertNotNull(puppy);
    }

    @Test
    public void testBufferedImage() {
        assertThrows(IOException.class,
                ImageTesting::execute);
    }

    @Test
    public void testRescaling() {
        BufferedImage puppy = null;
        try {
            puppy = read(getClass().getResource("puppyTest.jpg")); //original 256X256
        } catch (IOException e) {
            e.printStackTrace();
        }
        int targetWidth = 600;
        int targetHeight = 600;
        BufferedImage rescaledPuppy = Utils.rescaleIcon(puppy, targetWidth, targetHeight);
        Assert.assertEquals(targetHeight, rescaledPuppy.getHeight());
        Assert.assertEquals(targetWidth, rescaledPuppy.getWidth());
    }

    @Test
    public void testConvertingToBlackAndWhite() {
        BufferedImage puppy = null;
        BufferedImage puppyBlackWhite = null;
        InputStream is = null;
        InputStream is1 = null;
        try {
            puppy = read(getClass().getResource("puppyTest.jpg"));
            puppyBlackWhite = ConversionToBlackAndWhite.convertImageToBlackWhite(puppy);
            File outputfile = new File("puppyTestBW.jpg");
            ImageIO.write(puppyBlackWhite, "jpg", outputfile);
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            ByteArrayOutputStream os1 = new ByteArrayOutputStream();
            ImageIO.write(puppy, "jpg", os);
            ImageIO.write(puppyBlackWhite, "jpg", os1);
            is = new ByteArrayInputStream(os.toByteArray());
            is1 = new ByteArrayInputStream(os1.toByteArray());
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {

            assertTrue(isEqual(is, is));
        } catch (IOException e) {
            e.printStackTrace();
        }
        Assert.assertNotEquals(puppy, puppyBlackWhite);
    }


    private boolean isEqual(InputStream i1, InputStream i2) throws IOException {
        byte[] buf1 = new byte[64 *1024];
        byte[] buf2 = new byte[64 *1024];
        try {
            DataInputStream d2 = new DataInputStream(i2);
            int len;
            while ((len = i1.read(buf1)) > 0) {
                d2.readFully(buf2,0,len);
                for(int i=0;i<len;i++)
                    if(buf1[i] != buf2[i]) return false;
            }
            return d2.read() < 0; // is the end of the second file also.
        } catch(EOFException ioe) {
            return false;
        } finally {
            i1.close();
            i2.close();
        }
    }

    @Test
    public void testMaximumWidthAndHeight() {
        ArrayList<BufferedImage> images = new ArrayList<>();
        BufferedImage dog;
        BufferedImage cat;
        BufferedImage unicorn;
        try {
            dog = ImageIO.read(new FileInputStream("src/group9/UnitTests/dog.jpg"));
            cat = ImageIO.read(new FileInputStream("src/group9/UnitTests/cat.jpg"));
            unicorn = ImageIO.read(new FileInputStream("src/group9/UnitTests/unicorn.jpg"));
            images.add(dog);
            images.add(cat);
            images.add(unicorn);
            GridCollageGenerator collageGenerator = new GridCollageGenerator(images);
            Assert.assertEquals(976, collageGenerator.getLargestWidth(images));
            Assert.assertEquals(549, collageGenerator.getLargestHeight(images));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testMinimumWidthAndHeight() {
        ArrayList<BufferedImage> images = new ArrayList<>();
        BufferedImage dog;
        BufferedImage cat;
        BufferedImage unicorn;
        try {
            dog = ImageIO.read(new FileInputStream("src/group9/UnitTests/dog.jpg"));
            cat = ImageIO.read(new FileInputStream("src/group9/UnitTests/cat.jpg"));
            unicorn = ImageIO.read(new FileInputStream("src/group9/UnitTests/unicorn.jpg"));
            images.add(dog);
            images.add(cat);
            images.add(unicorn);
            GridCollageGenerator collageGenerator = new GridCollageGenerator(images);
            Assert.assertEquals(256, collageGenerator.getSmallestHeight(images));
            Assert.assertEquals(256, collageGenerator.getSmallestWidth(images));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}