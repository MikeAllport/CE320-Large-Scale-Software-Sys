package group9.homepage_window;

import group9.CollageMakerApplication;
import group9.button_handling.*;
import group9.utils.Utils;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import static javax.swing.BorderFactory.createEmptyBorder;

public class Test_Homepage extends JPanel {
    CollageMakerApplication theApp;

    public Test_Homepage(CollageMakerApplication theApp){
        this.theApp = theApp;
        GridBagConstraints c = new GridBagConstraints();

        setLayout(new GridBagLayout());
        setBackground(Color.WHITE);

        c.fill = GridBagConstraints.BOTH;
        c.insets = new Insets(10,10,10,10);

        //'load image' button including resizing icon image to fit button
        CustomJButton loadImageBtn = new CustomJButton("load");

        //'delete image' button including resizing icon image to fit button
        CustomJButton deleteImageButton = new CustomJButton("delete");

        //Adding 'load image' and 'delete image' button to panel
        JPanel loadDelete = new JPanel();
        loadDelete.setBackground(Color.WHITE);
        loadDelete.add(loadImageBtn);
        loadDelete.add(deleteImageButton);

        //Adding panel to cell (0, 0)
        c.gridx = 0;
        c.gridy = 0;
        add(loadDelete, c);

        //'help image' button including resizing icon image to fit button
        CustomJButton helpHomePageBtn = new CustomJButton("help");

        //Adding 'help' button to cell (0, 0)
        c.gridx = 2;
        c.gridy = 0;
        add(helpHomePageBtn, c);

        c.gridx = 1;
        c.gridy = 0;
        JLabel t = new JLabel("Collage Generator", SwingConstants.CENTER);
        t.setFont(new Font("Helvetica", Font.BOLD, 40));
        add(t, c);

        c.weightx = 0.5;
        c.weighty = 0.5;

        c.gridx = 0;
        c.gridy = 1;
        ImageList imageThumbnails = new ImageList(theApp);

        JLabel image = new JLabel(); //Preview of selected image in JList

        //Initialising JFileList
        JList<File> filesList = new JList<>(theApp.getFileNamesModel());
        filesList.setCellRenderer(new CustomListRenderer());
        filesList.addListSelectionListener(new DisplaySelectedImageHandler(theApp,image,filesList));

        //Adding List to Scrollable area
        JScrollPane s = new JScrollPane(filesList);
        s.setBorder(createEmptyBorder());
        imageThumbnails.add(s, BorderLayout.CENTER);

        add(imageThumbnails, c);

        c.gridx = 1;
        c.gridy = 1;
        add(new PreviewImages(image, theApp), c);

        c.gridx = 2;
        c.gridy = 1;
        add(new CollageOptions(), c);

        //Adding in buttonHandlers for their respective buttons
        loadImageBtn.addActionListener(new LoadImageButtonHandler(theApp));
        deleteImageButton.addActionListener(new DeleteImageButtonHandler(theApp, filesList));
        helpHomePageBtn.addActionListener(new HelpButtonHandler());
        //customiseCollageBtn.addActionListener(new CustomiseCollageButtonHandler(theApp)); - for iteration 2
    }

    public static void main(String[] args) throws IOException {
        JFrame f = new JFrame();
        f.setPreferredSize(Toolkit.getDefaultToolkit().getScreenSize());

        f.add(new Test_Homepage(new CollageMakerApplication()));
        f.setVisible(true);
        f.pack();
    }
}

class CustomJButton extends JButton{
    public CustomJButton(String buttonName){
        super();
        ImageIcon icon;
        switch(buttonName){
            case "load":
                icon = new ImageIcon("trunk/resources/icons/load_image_button.png");
                break;
            case "delete":
                icon = new ImageIcon("trunk/resources/icons/delete_button.png");
                break;
            case "help":
                icon = new ImageIcon("trunk/resources/icons/help_icon_button.png");
                break;
            case "generate":
                icon = new ImageIcon("trunk/resources/icons/generate_collage_button.png");
                break;
            case "customise":
                icon = new ImageIcon("trunk/resources/icons/customise_image_button.png");
                break;
            default:
                throw new IllegalStateException("Unexpected value: " + buttonName);
        }
        Image resizingIcon = icon.getImage().getScaledInstance(75,75,Image.SCALE_SMOOTH);
        icon = new ImageIcon(resizingIcon);
        setIcon(icon);
        setPreferredSize(new Dimension(75, 75));
        setBorder(null);
    }
}

class CustomListRenderer extends DefaultListCellRenderer{
    Font font = new Font("helvetica", Font.BOLD, 8);

    @Override
    public Component getListCellRendererComponent(
            JList list, Object value, int index,
            boolean isSelected, boolean cellHasFocus) {

        JLabel label = (JLabel) super.getListCellRendererComponent(
                list, value, index, isSelected, cellHasFocus);

        BufferedImage image = null;
        try {
            image = ImageIO.read((File) value);
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
        image = Utils.rescaleIcon(image, 50, 50);
        ImageIcon testIcon = new ImageIcon(image);

        list.setLayoutOrientation(JList.HORIZONTAL_WRAP);
        list.setVisibleRowCount(0);
        list.setFixedCellWidth(80);
        list.setFixedCellHeight(80);

        label.setPreferredSize(new Dimension (80, 80));
        label.setText(((File) value).getName());
        label.setIcon(testIcon);
        label.setHorizontalTextPosition(JLabel.CENTER);
        label.setVerticalTextPosition(JLabel.BOTTOM);
        label.setVerticalAlignment(JLabel.CENTER);
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setFont(font);
        return label;
    }
}