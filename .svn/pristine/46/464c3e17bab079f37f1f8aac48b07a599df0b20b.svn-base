import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Random;

public class BinaryTreeBufferedImage {
    BinaryTreeNodeBufferedImage root;
    Dimension size;

    public BinaryTreeBufferedImage(Dimension dimension)
    {
        this.root = null;
        this.size = dimension;
    }

    public void insertImage(Point point, BufferedImage image)
    {
        if (root == null)
        {
            root = new BinaryTreeNodeBufferedImage(point, image, size, false);
            return;
        }

        BinaryTreeNodeBufferedImage child = root;
        boolean inserted = false;
        do
        {
            if(child.leftChild == null && child.rightChild == null)
            {
                int leftX = child.bounds.getNormalizedX1();
                int leftY = child.bounds.getNormalizedY1();
                if (child.horizontal)
                {
                    Dimension newDim = new Dimension((int)(child.bounds.getSize().getWidth() / 2),
                            (int)(child.bounds.getSize().getHeight()));

                    int rightx = leftX + newDim.width;
                    int righty = leftY;
                    child.leftChild = new BinaryTreeNodeBufferedImage(new Point(leftX, leftY), child.image,
                            newDim, false);
                    child.rightChild = new BinaryTreeNodeBufferedImage(new Point(rightx, righty), image,
                            newDim, false);
                }
                else
                {
                    Dimension newDim = new Dimension((int)child.bounds.getSize().getWidth(),
                            (int)(child.bounds.getSize().getHeight() / 2));
                    int rightx = leftX;
                    int righty = leftY + newDim.height;
                    child.leftChild = new BinaryTreeNodeBufferedImage(new Point(leftX, leftY), child.image,
                            newDim, true);
                    child.rightChild = new BinaryTreeNodeBufferedImage(new Point(rightx, righty), image,
                            newDim, true);
                }
                inserted = true;
            }
//                Bounds newPointBounds = new Bounds(point, child.size);
//                int newXlocalised = point.getX() - newPointBounds.getNormalizedX1();
//                int newYlocalised = point.getY() - newPointBounds.getNormalizedY1();
//                int childXlocalised = child.bounds.getX1() - child.bounds.getNormalizedX1();
//                int childYlocalised = child.bounds.getY1() - child.bounds.getNormalizedY1();
//                int halfWidth = (int)(child.size.getWidth() / 2);
//                int halfHeight = (int)(child.size.getHeight() / 2);
//                if (newXlocalised < halfHeight && childXlocalised < halfWidth ||
//                        newXlocalised > halfHeight && childXlocalised > halfHeight)
//                {
//                    // splitting vertically
//                    if(newYlocalised < childYlocalised)
//                    {
//                        child.leftChild = new BinaryTreeNodeBufferedImage(point, image,
//                                new Dimension(halfWidth, (int)child.size.getHeight()), false);
//                        child.rightChild = new BinaryTreeNodeBufferedImage(child.position, child.image,
//                                new Dimension(halfWidth, (int)child.size.getHeight()), false);
//                    }
//                    else
//                    {
//                        child.rightChild = new BinaryTreeNodeBufferedImage(point, image,
//                                new Dimension(halfWidth, (int)child.size.getHeight()), false);
//                        child.leftChild = new BinaryTreeNodeBufferedImage(child.position, child.image,
//                                new Dimension(halfWidth, (int)child.size.getHeight()), false);
//                    }
//                }
//                else
//                {
//                    // splitting horizontally
//                    if(newXlocalised < childXlocalised)
//                    {
//                        child.leftChild = new BinaryTreeNodeBufferedImage(point, image,
//                                new Dimension((int)child.size.getWidth(), halfHeight), true);
//                        child.rightChild = new BinaryTreeNodeBufferedImage(child.position, child.image,
//                                new Dimension((int)child.size.getWidth(), halfHeight), true);
//                    }
//                    else
//                    {
//                        child.rightChild = new BinaryTreeNodeBufferedImage(point, image,
//                                new Dimension((int)child.size.getWidth(), halfHeight), true);
//                        child.leftChild = new BinaryTreeNodeBufferedImage(child.position, child.image,
//                                new Dimension((int)child.size.getWidth(), halfHeight), true);
//                    }
//                }
//                inserted = true;
//            }
            if (child.leftChild.isOverlapNormalized(point))
                child = child.leftChild;
            else
                child = child.rightChild;
        } while (!inserted);
    }

    public ArrayList<CollageBufferedImage> getImages()
    {
        ArrayList<CollageBufferedImage> images = new ArrayList<>();
        if (root == null)
            return images;
        images.addAll(root.getImages());
        return images;
    }
}
