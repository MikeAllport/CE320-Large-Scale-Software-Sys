package group9;

import group9.CollageWindow.CollagePage;
import group9.HomepageWindow.HomePage;
import group9.HomepageWindow.MenuBar;
import group9.RandomCollageGenerator.CollageGeneratorBinaryTree;
import group9.RandomCollageGenerator.CollageGeneratorGridBased;
import group9.RandomCollageGenerator.ICollageGenerator;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

public class Piccollage extends JFrame {
    // need to turn into array list, and have arrow buttons to scroll through
    protected final ArrayList<BufferedImage> listOfGeneratedCollages = new ArrayList<>();
    protected final ArrayList<File> imageFiles = new ArrayList<>();
    protected final ArrayList<BufferedImage> bufferedImages = new ArrayList<>();
    protected final DefaultListModel<File> filenamesModel = new DefaultListModel<File>();//list model to work with JList
    protected final HomePage homepage;
    protected final CollagePage collagePage;

    public ArrayList<BufferedImage> getGeneratedCollages(){
        return listOfGeneratedCollages;
    }

    public Piccollage() throws IOException {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setPreferredSize(new Dimension(Toolkit.getDefaultToolkit().getScreenSize().width, Toolkit.getDefaultToolkit().getScreenSize().height-100));
        setResizable(false);
        setLayout(new CardLayout(10, 10));
        MenuBar m = new MenuBar();
        setJMenuBar(m);

        homepage = new HomePage(this);
        add("homePage", homepage.getHomePage());

        collagePage = new CollagePage(this);
        add("collagePage", collagePage.getCollagePageJPanel());

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        setTitle("GROUP 09");
        ImageIcon titleIcon = new ImageIcon("trunk\\resources\\icons\\frame_title_icon_piccollage.png");
        setIconImage(titleIcon.getImage());
        setVisible(true);
        pack();
    }

    public HomePage getHomePage(){
        return this.homepage;
    }

    public CollagePage getCollagePage(){
        return this.collagePage;
    }

    public static void main(String[] args) throws IOException {
        JWindow loadingScreen = new JWindow(); //loading screen before application runs
        loadingScreen.getContentPane().add(
                new JLabel("", new ImageIcon("trunk\\resources\\icons\\loading.gif"), SwingConstants.CENTER));
        loadingScreen.setBounds(500, 150, 500, 300);
        loadingScreen.setVisible(true);
            new Thread( () -> {
                try {
                Thread.sleep(6000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                loadingScreen.dispose();
            }).start();
        new Piccollage();
    }

    public void addFiles(File[] files) {
        imageFiles.addAll(Arrays.asList(files));
        addFileNamesToModel(files);
    }

    public void deleteFile(File file) {
        imageFiles.remove(getFileFromName(file.getName()));
        filenamesModel.removeElement(file);
    }

    public void clearAllLoadedImages(){
        imageFiles.clear();
        filenamesModel.clear();
    }

    public File getFileFromName(String filename) {
        for (File f : imageFiles) if (f.getName().equals(filename)) return f;
        return null;
    }

    public void createImagesFromFiles() throws IOException {
        for (File f : imageFiles) {
            BufferedImage image = null;
            try {
                image = ImageIO.read(f);
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
            bufferedImages.add(image);
        }
    }

    public void addFileNamesToModel(File[] files) {
        for (File f : files) {
            filenamesModel.addElement(f);
        }
    }

    public ArrayList<BufferedImage> getBufferedImages() {
        try {
            bufferedImages.clear();
            createImagesFromFiles();
            return bufferedImages;
        } catch (IOException e) {
            return new ArrayList<>();
        }
    }

    public void generateCollages()
    {
        this.getGeneratedCollages().clear();
        if (this.bufferedImages.size() <= 0)
            return;

        Dimension sizeToDraw = new Dimension(
                this.getCollagePage().getCollagePageJPanel().getWidth(),
                this.getCollagePage().getCollagePageJPanel().getHeight());

        ICollageGenerator generator = new CollageGeneratorBinaryTree(this.bufferedImages, sizeToDraw, true);
        this.listOfGeneratedCollages.add(generator.getCollage());
        generator = new CollageGeneratorGridBased(this.bufferedImages, sizeToDraw, bufferedImages.size() / 2);
        this.listOfGeneratedCollages.add(generator.getCollage());
        generator = new CollageGeneratorBinaryTree(this.bufferedImages, sizeToDraw, true);
        this.listOfGeneratedCollages.add(generator.getCollage());
        generator = new CollageGeneratorBinaryTree(this.bufferedImages, sizeToDraw, true);
        this.listOfGeneratedCollages.add(generator.getCollage());
    }

    public DefaultListModel<File> getFileNamesModel() {
        return filenamesModel;
    }

    public ArrayList<File> getImageFiles() {
        return imageFiles;
    }
}