package group9.UnitTests;

import group9.GridCollageGenerator.GridCollageGenerator;
import group9.Testing.ConversionToBlackAndWhite;
import group9.utils.Utils;
import org.junit.Assert;
import org.junit.jupiter.api.Test;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayList;

import static javax.imageio.ImageIO.read;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class ImageTesting {

    private static void execute() throws IOException {
        File kitten = new File("trunk\\resources\\testImages\\kien.jpg"); //expect IOException
        BufferedImage kittenImage = (read(kitten));
    }

    @Test
    public void testFileNotNull() {
        File kitten = new File("trunk\\resources\\testImages\\kitten.jpg");
        Assert.assertNotNull(kitten);
    }

    @Test
    public void testBufferedImageNotNull() {
        BufferedImage puppy = null;
        try {
            puppy = read(getClass().getResource("puppyTest.jpg"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        Assert.assertNotNull(puppy);
    }

    @Test
    public void testBufferedImage() {
        assertThrows(IOException.class,
                ImageTesting::execute);
    }

    @Test
    public void testRescaling() {
        BufferedImage puppy = null;
        try {
            puppy = read(getClass().getResource("puppyTest.jpg")); //original 256X256
        } catch (IOException e) {
            e.printStackTrace();
        }
        int targetWidth = 600;
        int targetHeight = 600;
        BufferedImage rescaledPuppy = Utils.rescaleIcon(puppy, targetWidth, targetHeight);
        Assert.assertEquals(targetHeight, rescaledPuppy.getHeight());
        Assert.assertEquals(targetWidth, rescaledPuppy.getWidth());
    }

    @Test
    public void testConvertingToBlackAndWhite() {
        BufferedImage puppy = null;
        BufferedImage puppyBlackWhite = null;
        InputStream is = null;
        InputStream is1 = null;
        try {
            puppy = read(getClass().getResource("puppyTest.jpg"));
            puppyBlackWhite = ConversionToBlackAndWhite.convertImageToBlackWhite(puppy);
            File outputfile = new File("puppyTestBW.jpg");
            ImageIO.write(puppyBlackWhite, "jpg", outputfile);
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            ByteArrayOutputStream os1 = new ByteArrayOutputStream();
            ImageIO.write(puppy, "jpg", os);
            ImageIO.write(puppyBlackWhite, "jpg", os1);
            is = new ByteArrayInputStream(os.toByteArray());
            is1 = new ByteArrayInputStream(os1.toByteArray());
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            assert is != null;
            assertFalse(compare(is, is1));
        } catch (IOException e) {
            e.printStackTrace();
        }
        Assert.assertNotEquals(puppy, puppyBlackWhite);
    }


    public boolean compare(InputStream in, InputStream in1) throws IOException {
        int i, j;
        int k = 1;
        while (((i = in.read()) != -1) && ((j = in1.read()) != -1)) {
            if (i != j) {
                k = 0;
                break;
            }
        }
        in.close();
        in1.close();
        if (k == 1) {
            System.out.println("Images are the same");
            return true;

        } else {
            System.out.println("Images not the same");
            return false;
        }
    }

    @Test
    public void testMaximumWidthAndHeight() {
        ArrayList<BufferedImage> images = new ArrayList<>();
        BufferedImage dog;
        BufferedImage cat;
        BufferedImage unicorn;
        try {
            dog = ImageIO.read(new FileInputStream("src/group9/UnitTests/dog.jpg"));
            cat = ImageIO.read(new FileInputStream("src/group9/UnitTests/cat.jpg"));
            unicorn = ImageIO.read(new FileInputStream("src/group9/UnitTests/unicorn.jpg"));
            images.add(dog);
            images.add(cat);
            images.add(unicorn);
            GridCollageGenerator collageGenerator = new GridCollageGenerator(images);
            Assert.assertEquals(976, collageGenerator.getLargestWidth(images));
            Assert.assertEquals(549, collageGenerator.getLargestHeight(images));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testMinimumWidthAndHeight() {
        ArrayList<BufferedImage> images = new ArrayList<>();
        BufferedImage dog;
        BufferedImage cat;
        BufferedImage unicorn;
        try {
            dog = ImageIO.read(new FileInputStream("src/group9/UnitTests/dog.jpg"));
            cat = ImageIO.read(new FileInputStream("src/group9/UnitTests/cat.jpg"));
            unicorn = ImageIO.read(new FileInputStream("src/group9/UnitTests/unicorn.jpg"));
            images.add(dog);
            images.add(cat);
            images.add(unicorn);
            GridCollageGenerator collageGenerator = new GridCollageGenerator(images);
            Assert.assertEquals(256, collageGenerator.getSmallestHeight(images));
            Assert.assertEquals(256, collageGenerator.getSmallestWidth(images));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}