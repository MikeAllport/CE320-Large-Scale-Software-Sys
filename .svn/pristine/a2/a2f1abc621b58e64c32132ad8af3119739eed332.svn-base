import java.awt.*;

public class Bounds {
    private int x1, y1, x2, y2, normalizedX1, normalizedX2, normalizedY1, normalizedY2;
    private Dimension size;

    Bounds(int x1, int x2, int y1, int y2)
    {
        this.x1 = x1;
        this.x2 = x2;
        this.y1 = y1;
        this.y2 = y2;
        this.size = new Dimension(x2 - x1, y2 - y1);
        setNormalized();
    }

    Bounds(Point point, Dimension size)
    {
        this.x1 = point.getX();
        this.y1 = point.getY();
        this.x2 = x1 + (int) size.getWidth();
        this.y2 = y1 + (int) size.getHeight();
        this.size = size;
        setNormalized();
    }

    // gets normalized bounds
    Bounds(int x, int y, Dimension size)
    {
        this.x1 = x;
        this.x2 = x + (int) size.getWidth();
        this.y1 = y;
        this.y2 = y + (int) size.getHeight();
        this.size = size;
        setNormalized();
    }

    private void setNormalized()
    {
        int pointsBeginXMod = (int) x1 / (int) this.size.getWidth();
        int boundsXMin = pointsBeginXMod * (int) this.size.getWidth();
        this.normalizedX1 = boundsXMin;
        this.normalizedX2 = boundsXMin + (int) this.size.getWidth();

        int pointsBeginYMod = (int) y1 / (int) this.size.getHeight();
        int boundsYMin = pointsBeginYMod * (int) this.size.getHeight();
        this.normalizedY1 = boundsYMin;
        this.normalizedY2 = boundsYMin + (int) this.size.getHeight();
    }

    public boolean isOverlap(int x, int y, Dimension size)
    {
        Bounds otherBounds = new Bounds(x, y, size);
        return isOverlap(otherBounds);
    }

    public boolean isOverlap(Bounds other)
    {
        return this.x1 < other.x2 &&
                this.x2 > other.x1 &&
                this.y1 < other.y2 &&
                this.y2 > other.y1;
    }

    public boolean isOverlapNormalized(int x, int y, Dimension size)
    {
        Bounds otherBounds = new Bounds(x, y, size);
        return isOverlapNormalized(otherBounds);
    }

    public boolean isOverlapNormalized(Bounds other)
    {
        return this.normalizedX1 < other.normalizedX2 &&
                this.normalizedX2 > other.normalizedX1 &&
                this.normalizedY1 < other.normalizedY2 &&
                this.normalizedY2 > other.normalizedY1;
    }

    public int getX1() {
        return x1;
    }

    public int getX2() {
        return x2;
    }

    public int getY1() {
        return y1;
    }

    public int getY2() {
        return y2;
    }

    public int getNormalizedX1() {
        return normalizedX1;
    }

    public int getNormalizedX2() {
        return normalizedX2;
    }

    public int getNormalizedY1() {
        return normalizedY1;
    }

    public int getNormalizedY2() {
        return normalizedY2;
    }

    public Dimension getSize() {
        return size;
    }
}
