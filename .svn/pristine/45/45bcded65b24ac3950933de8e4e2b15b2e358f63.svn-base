import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

public class BinaryTreeBufferedImage {
    BinaryTreeNodeBufferedImage root;
    Dimension size;

    public BinaryTreeBufferedImage(Dimension dimension)
    {
        this.root = null;
        this.size = dimension;
    }

    public void insertImage(Point point, BufferedImage image)
    {
        if (root == null)
        {
            root = new BinaryTreeNodeBufferedImage(point, image, size, false);
            return;
        }

        BinaryTreeNodeBufferedImage child = root;
        boolean inserted = false;
        do
        {
            if(child.leftChild == null && child.rightChild == null)
            {
                int leftX = child.bounds.getNormalizedX1();
                int leftY = child.bounds.getNormalizedY1();
                if (child.horizontal)
                {
                    Dimension newDim = new Dimension(child.bounds.getSize().width / 2,
                            child.bounds.getSize().height);

                    int rightx = leftX + newDim.width;
                    int righty = leftY;
                    child.leftChild = new BinaryTreeNodeBufferedImage(new Point(leftX, leftY), child.image,
                            newDim, false);
                    child.rightChild = new BinaryTreeNodeBufferedImage(new Point(rightx, righty), image,
                            newDim, false);
                }
                else
                {
                    Dimension newDim = new Dimension(child.bounds.getSize().width,
                            child.bounds.getSize().height / 2);
                    int rightx = leftX;
                    int righty = leftY + newDim.height;
                    child.leftChild = new BinaryTreeNodeBufferedImage(new Point(leftX, leftY), child.image,
                            newDim, true);
                    child.rightChild = new BinaryTreeNodeBufferedImage(new Point(rightx, righty), image,
                            newDim, true);
                }
                inserted = true;
            }
            if (child.leftChild.isOverlapNormalized(point))
                child = child.leftChild;
            else
                child = child.rightChild;
        } while (!inserted);
    }

    public ArrayList<BufferedImageWithBounds> getImages()
    {
        ArrayList<BufferedImageWithBounds> images = new ArrayList<>();
        if (root == null)
            return images;
        images.addAll(root.getImages());
        return images;
    }
}
