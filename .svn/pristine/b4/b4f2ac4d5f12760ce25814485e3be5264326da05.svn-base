package group9.GridCollageGenerator;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class CollageGenerator {
    ArrayList<BufferedImage> images;
    int[][] imageLocations;

    public CollageGenerator(ArrayList<BufferedImage> images){
        this.images = images;
        Collage collage = generateCollage();
        collage.draw();
        try {
            collage.save("saved");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public int getLargestWidth(ArrayList<BufferedImage> imageCollection) {
        int largestWidth = 0;
        for (BufferedImage image: imageCollection) {
            int width = image.getWidth();
            if(width>largestWidth) largestWidth = width;
        }
        return largestWidth;
    }

    public int getLargestHeight(ArrayList<BufferedImage> imageCollection) {
        int largestHeight = 0;
        for (BufferedImage image: imageCollection) {
            int height = image.getHeight();
            if(height>largestHeight) largestHeight = height;
        }
        return largestHeight;
    }

    public int getSmallestWidth(ArrayList<BufferedImage> imageCollection) {
        int smallestWidth = Integer.MAX_VALUE;
        for (BufferedImage image: imageCollection) {
            int width = image.getWidth();
            if(width < smallestWidth) smallestWidth = width;
        }
        return smallestWidth;
    }

    public int getSmallestHeight(ArrayList<BufferedImage> imageCollection) {
        int smallestHeight = Integer.MAX_VALUE;
        for (BufferedImage image: imageCollection) {
            int height = image.getHeight();
            if(height < smallestHeight) smallestHeight = height;
        }
        return smallestHeight;
    }

    private Collage generateCollage() {
        int largestWidth = getLargestWidth(this.images);
        int largestHeight = getLargestHeight(this.images);
        //int smallestWidth = getSmallestWidth();
        //int smallestHeight = getSmallestHeight();

        int numPics = images.size();
        int[] gridShape = getGridShape(numPics);

        Collage collage = new Collage(largestWidth*gridShape[0],largestHeight*gridShape[1]);

        //imageLocations = new int[gridShape[0]][gridShape[1]];

        int index = 0;
        for (int i=0; i < gridShape[0]; i++) {
            for (int j=0; j<gridShape[1]; j++) {
                System.out.println(index);
                collage.addImage(images.get(index), largestWidth*i, largestHeight*j);
                index++;
            }
        }

        return collage;
    }

    private int calcNumHorizontal(BufferedImage image, int areaWidth) {
        double imageWidth = image.getWidth();

        return (int) Math.ceil(imageWidth / areaWidth);
    }

    private int calcNumVertical(BufferedImage image, int areaHeight) {
        double imageHeight = image.getHeight();

        return (int) Math.ceil(imageHeight / areaHeight);
    }

    private static int[] getGridShape(int n){
        int factor = (int)Math.sqrt(n);
        while (n % factor != 0) factor--;

        return new int[]{factor,n/factor};
    }

    //code to test this Collage Generator
    public static void main(String[] args) throws IOException {
        ArrayList<BufferedImage> images = new ArrayList<>();
        images.add(ImageIO.read(new File("Test Images/puppy.jpg")));
        images.add(ImageIO.read(new File("Test Images/puppy.jpg")));
        images.add(ImageIO.read(new File("Test Images/unicorn.jpg")));
        images.add(ImageIO.read(new File("Test Images/puppy.jpg")));
        images.add(ImageIO.read(new File("Test Images/puppy.jpg")));
        images.add(ImageIO.read(new File("Test Images/puppy.jpg")));
        images.add(ImageIO.read(new File("Test Images/puppy.jpg")));
        images.add(ImageIO.read(new File("Test Images/puppy.jpg")));
        images.add(ImageIO.read(new File("Test Images/puppy.jpg")));
        images.add(ImageIO.read(new File("Test Images/puppy.jpg")));
        images.add(ImageIO.read(new File("Test Images/puppy.jpg")));
        images.add(ImageIO.read(new File("Test Images/puppy.jpg")));

        new CollageGenerator(images);
    }
}
